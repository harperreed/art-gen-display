<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>An AI magic Art Frame</title>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            height: 100%;
        }

        .fullscreen-image {
            width: 100%;
            height: 100%;
            background: url('loading.gif') no-repeat center center;
            background-size: cover;
        }

        #clock {
            position: absolute;
            top: 2vh;
            /* 10% of the viewport height from the top */
            right: 2vw;
            /* 10% of the viewport width from the right */
            font-size: 4vw;
            font-family: sans-serif;
            color: white;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 1vh 1vw;
            border-radius: 1vw;
            display: none;
            /* mix-blend-mode: difference; */
            box-shadow: 0.3vw 0.3vh 0.5vw rgba(0, 0, 0, 0.5);
        }

        #prompt {
            position: absolute;
            bottom: 2vh;
            /* 10% of the viewport height from the top */
            left: 2vw;
            width: 20vw;
            /* 10% of the viewport width from the right */
            font-size: 2vw;
            font-family: sans-serif;
            color: rgba(255, 255, 255, 1);
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 1vw;
            display: none;
            padding: 1vh 1vw;
            /* mix-blend-mode: overlay; */
            box-shadow: 0.3vw 0.3vh 0.5vw rgba(0, 0, 0, 0.5);
        }

        #progressBarContainer {
            position: fixed;
            /* Fixed position */
            bottom: 0;
            /* At the bottom of the screen */
            left: 0;
            /* Align to the left side */
            width: 100vw;
            /* Full width of the viewport */
            height: 4px;
            /* Adjust height as needed */
            background-color: #dddddd1c;
            /* Background of the container */
            /* mix-blend-mode: difference; */
            display: none;
        }

        #progressBar {
            height: 100%;
            width: 0;
            /* Initial width is 0 */
            background-color: #00ff08aa;
            /* Initial color of the progress bar */

        }
    </style>
</head>

<body>
    <div class="fullscreen-image" id="background"></div>
    <div id="clock">Loading</div>
    <div id="prompt">Loading</div>
    <div id="progressBarContainer">
        <div id="progressBar"></div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const defaultWidth = document.body.clientWidth;
        const defaultHeight = document.body.clientHeight;
        let interval = false
        let intervalDuration = 600000; // Duration of interval in milliseconds
        let progressInterval;

        function updateClock() {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            document.getElementById('clock').innerText = timeString;
        }

        function requestImage() {
            console.log("Requesting image", defaultWidth, defaultHeight);
            socket.emit('request image', defaultWidth, defaultHeight);


        }

        function startInterval() {
            if (!interval) {
                progressInterval = setInterval(updateProgressBar, 1000); // Update every second
                interval = setInterval(requestImage, intervalDuration);
            } else {
                console.log("Interval already started");
            }
        }

        function updateProgressBar() {
            let progressBar = document.getElementById('progressBar');
            let width = parseFloat(progressBar.style.width.slice(0, -1)); // Get current width
            if (isNaN(width)) { width = 0; } // If width is NaN, set it to 0
            let increment = 100 / (intervalDuration / 1000); // Calculate increment for each second
            console.log(increment);
            if (width + increment <= 100) {
                progressBar.style.width = (width + increment) + '%';
            } else {
                clearInterval(progressInterval); // Stop the interval when it reaches 100%
                progressBar.style.width = '0%'; // Reset progress bar
            }
        }

        socket.on('image changed', (newImageUrl) => {
            const newUrl = `/cache/${newImageUrl}`;
            document.getElementById('background').style.backgroundImage = `url(${newUrl})`;

            // Reset progress bar on new image request
            clearInterval(progressInterval);
            document.getElementById('progressBar').style.width = '0%';
            progressInterval = setInterval(updateProgressBar, 1000);
        });

        socket.on('image prompt', (prompt) => {
            console.log("Prompt", prompt)
            document.getElementById('prompt').innerText = prompt;
        });

        socket.on('connect', () => {
            console.log('Connected to server');
            requestImage();
            startInterval()
        });

        socket.on('show clock', () => {
            console.log('Showing Clock');
            document.getElementById('clock').style.display = 'block';
            setInterval(updateClock, 1000); // Update the clock every second
        });

        socket.on('show prompt', () => {
            console.log('Showing Prompt');
            document.getElementById('prompt').style.display = 'block';
        });
        socket.on('show progressbar', () => {
            console.log('Showing Progress Bar');
            document.getElementById('progressBarContainer').style.display = 'block';
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from server');
        });








    </script>
</body>

</html>